!############################################################################
!
subroutine wallBoundary (ux,uy,uz)
        !
        !############################################################################

        USE decomp_2d
        USE variables
        USE param
        USE var
        USE MPI


        implicit none

        real(mytype),dimension(xsize(1),xsize(2),xsize(3)) :: ux,uy,uz
        real(mytype),dimension(xsize(1),xsize(3))::uxWall,uyWall,uzWall
        integer :: i,j,k,ii,kk,code,coun,nx_Act,nz_Act
        real :: uxAmpl,uyAmpl,uzAmpl,lx0,lx1,lz0,lz1,lx01,lz01
	real :: alpha_x,alpha_z,waveLenght_x,waveLenght_z
        integer, dimension(2) :: dims, dummy_coords
        logical, dimension(2) :: dummy_periods

        !****************************************************
        !--------- Define the whole values of the wall ------
        !****************************************************

        !print *, xlx ,zlz,nx,nz,dx,dz
nx_Act=4
nz_Act=4
alpha_x=0.5
alpha_z=0.5
waveLenght_x=xlx/nx_Act
waveLenght_z=zlz/nz_Act


        lx0=waveLenght_x*(1.-alpha_x)   ! the length of the inactive part of the wall measured in X-direction
        lx1=waveLenght_x*alpha_x	 ! the length of the active part of the wall measured in X-direction
        lz0=waveLenght_z*(1.-alpha_z)    ! the length of the inactive part of the wall measured in z-direction
        lz1=waveLenght_z*alpha_z	 ! the length of the active part of the wall measured in z-direction
print *, waveLenght_x,waveLenght_z,lx0,lx1


        uyWall=0.
        ii=0;
        kk=0;
        print*, ii,kk
        if (ncly==2) then

                ! determine the processor grid in use
                call MPI_CART_GET(DECOMP_2D_COMM_CART_X, 2, &
                        dims, dummy_periods, dummy_coords, code)
                !find j=1 and j=ny
                if (xstart(2)==1) then  !! the Cores next to the lower wall
                        do i=1,xsize(1)
                        do k=1,xsize(3)
                        if (dx*ii<=lx1) then           
                                if (dz*kk<=lz1)  then

                                        uy(i,1,k)=1.                                           
                                endif
                        endif
                        kk=kk+1
                        if (dz*kk>lz1+lz0) then
                                kk=0
                        endif        
                        enddo    
                        ii=ii+1;
                        if (dx*ii>lx1+lx0) then
                                ii=0
                        endif   
kk=0 
                        enddo

                endif


        endif
        !********NCLY==2*************************************
        !****************************************************
        !WE ARE IN X PENCIL!!!!!!
        if (ncly==2) then
                if (itype.eq.2) then

                        ! determine the processor grid in use
                        call MPI_CART_GET(DECOMP_2D_COMM_CART_X, 2, &
                                dims, dummy_periods, dummy_coords, code)



                        !find j=1 and j=ny
                        if (xstart(2)==1) then
                                !print *, nrank, xstart(1),xend(1), xstart(3),xend(3)
                                do k=1,xsize(3)
                                do i=1,xsize(1)
                                !ux(i,1,k)=0.+dpdxy1(i,k)
                                !uy(i,1,k)=0.5
                                !uz(i,1,k)=0.+dpdzy1(i,k)
                                enddo
                                enddo
                        endif
                        !!print *,nrank,xstart(2),ny-(nym/p_row),nym,p_row
                        if (ny-(nym/dims(1))==xstart(2)) then
                                do k=1,xsize(3)
                                do i=1,xsize(1)
                                !print *, dpdxyn(i,k)
                                !ux(i,xsize(2),k)=0.+dpdxyn(i,k)
                                uy(i,xsize(2),k)=-0.5
                                !uz(i,xsize(2),k)=0.+dpdzyn(i,k)
                                enddo
                                enddo
                        endif

                endif
        endif


        return
end subroutine wallBoundary

